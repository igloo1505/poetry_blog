import React, { useEffect, useState } from "react";
import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import HeroSection from "../components/landing/HeroSection";
import * as Types from "../state/Types";
import { autoLoginOnFirstRequest } from "../util/autoLogin";
import Cookies from "cookies";
import mongoose from "mongoose";
import Submission from "../models/Submission";
import LandingBottomSection from "../components/landing/LandingBottomSection";
import { connect } from "react-redux";
import clsx from "clsx";
import { useDispatch } from "react-redux";

const Home = ({
	latestSubmissions,
	posts: {
		hasSearchResults,
		featuredPosts,
		filteredAllPosts: { noResult, byTag, byBody },
	},
}) => {
	const dispatch = useDispatch();

	useEffect(() => {
		if (latestSubmissions.length > 0 && !hasSearchResults) {
			dispatch({
				type: Types.SET_FEATURED_POSTS,
				payload: latestSubmissions.slice(0, 3),
			});
		}
	}, [hasSearchResults, noResult, byTag, byBody]);
	console.log("hasSearchResults: ", hasSearchResults);
	console.log("styles.overflowVisible: ", styles.overflowVisible);
	return (
		<div
			className={clsx(
				styles.container,
				hasSearchResults && styles.overflowVisible
			)}
			id="index-container-main"
		>
			<Head>
				<title>Poetry Blog</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<HeroSection poemCardArray={featuredPosts} />
			<LandingBottomSection poemCardArray={featuredPosts} />
		</div>
	);
};

const mapStateToProps = (state, props) => ({
	posts: state.posts,
	props: props,
});

export default connect(mapStateToProps)(Home);

export const getServerSideProps = async (ctx) => {
	// let _user = await autoLoginOnFirstRequest(ctx.req, ctx.res);
	let latestSubmissions = await mongoose
		.connect(process.env.MONGO_URI, {
			useNewUrlParser: true,
			useUnifiedTopology: true,
		})
		.then(async () => {
			let r = await Submission.find()
				.sort({ createdAt: -1 })
				.limit(10)
				.populate({
					path: "author",
					select: "firstName lastName email _id",
				});
			return r;
		});
	return {
		props: {
			// hasUser: _user,
			latestSubmissions: JSON.parse(JSON.stringify(latestSubmissions)),
		},
	};
};
